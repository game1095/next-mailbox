import { supabase } from "@/lib/supabaseClient";
import { NextResponse, NextRequest } from "next/server";

export async function PUT(
  request: NextRequest,
  // 1. üí° REVERT: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Type ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô Promise ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Vercel ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  context: { params: Promise<{ id: string }> }
) {
  try {
    // 2. üí° REVERT: ‡πÉ‡∏ä‡πâ await context.params ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á id ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    const { id: idFromPromise } = await context.params;

    console.log("--- DEBUGGING PUT Request ---");
    console.log("ID from URL (string):", idFromPromise);

    const body = await request.json();
    console.log("Raw body received:", body);

    // 3. ‡πÅ‡∏¢‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡∏Å
    const {
      id: bodyId,
      created_at,
      cleaningHistory,
      cleaning_history, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ snake_case ‡∏ï‡∏¥‡∏î‡∏°‡∏≤
      ...updateData
    } = body;

    // 4. üí° KEEP: ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏õ‡∏•‡∏á lat/lng ‡πÄ‡∏õ‡πá‡∏ô number
    //    (‡πÉ‡∏ä‡πâ parseFloat ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ lat/lng ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
    if (updateData.lat !== undefined) {
      updateData.lat = parseFloat(updateData.lat as string);
    }
    if (updateData.lng !== undefined) {
      updateData.lng = parseFloat(updateData.lng as string);
    }

    console.log("Cleaned data to update:", updateData);

    // 5. üí° KEEP: ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏õ‡∏•‡∏á id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ (string) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô number
    //    (‡πÉ‡∏ä‡πâ Number ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ id ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°)
    const numericId = Number(idFromPromise);
    if (isNaN(numericId)) {
      throw new Error("Invalid ID provided in URL.");
    }
    console.log("Querying Supabase with numeric ID:", numericId);

    // 6. ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Supabase
    const { data, error } = await supabase
      .from("mailboxes")
      .update(updateData)
      .eq("id", numericId) // ‡πÉ‡∏ä‡πâ numericId ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      .select()
      .single();

    if (error) {
      console.error("Supabase Error:", error);
      throw error; // ‡πÇ‡∏¢‡∏ô error ‡πÉ‡∏´‡πâ catch ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }

    console.log("Update Success:", data);
    return NextResponse.json(data);
  } catch (error) {
    let errorMessage = "An unexpected error occurred.";
    if (error instanceof Error) {
      errorMessage = error.message;
    }

    console.error("Returning 500 Error:", errorMessage, error);

    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}

import { supabase } from "@/lib/supabaseClient";
import { NextResponse, NextRequest } from "next/server";

export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  try {
    const { id } = context.params;
    console.log("--- DEBUGGING PUT Request ---");
    console.log("ID from URL (string):", id);

    // 1. ‡∏£‡∏±‡∏ö body ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    const body = await request.json();
    console.log("Raw body received:", body);

    // 2. ‡πÅ‡∏¢‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô id, created_at)
    const {
      id: bodyId,
      created_at,
      cleaningHistory,
      cleaning_history, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ snake_case ‡∏ï‡∏¥‡∏î‡∏°‡∏≤
      ...updateData
    } = body;

    // 3. --- üí° ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà ---
    //    ‡πÅ‡∏õ‡∏•‡∏á lat/lng ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (float) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    //    ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å form ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string
    if (updateData.lat !== undefined) {
      updateData.lat = parseFloat(updateData.lat);
    }
    if (updateData.lng !== undefined) {
      updateData.lng = parseFloat(updateData.lng);
    }

    console.log("Cleaned data to update:", updateData);

    // 4. --- üí° ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏î‡∏¥‡∏° ---
    //    ‡πÅ‡∏õ‡∏•‡∏á id ‡∏à‡∏≤‡∏Å URL (string) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Number
    const numericId = Number(id);
    if (isNaN(numericId)) {
      throw new Error("Invalid ID provided in URL.");
    }
    console.log("Querying Supabase with numeric ID:", numericId);

    // 5. ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Supabase
    const { data, error } = await supabase
      .from("mailboxes")
      .update(updateData) // updateData ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ lat/lng ‡πÄ‡∏õ‡πá‡∏ô number ‡πÅ‡∏•‡πâ‡∏ß
      .eq("id", numericId) // ‡πÉ‡∏ä‡πâ numericId ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
      .select()
      .single();

    if (error) {
      console.error("Supabase Error:", error);
      throw error; // ‡πÇ‡∏¢‡∏ô error ‡πÉ‡∏´‡πâ catch ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }

    console.log("Update Success:", data);
    return NextResponse.json(data);
  } catch (error) {
    let errorMessage = "An unexpected error occurred.";
    if (error instanceof Error) {
      errorMessage = error.message;
    }

    // Log error ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á 500
    console.error("Returning 500 Error:", errorMessage, error);

    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}
